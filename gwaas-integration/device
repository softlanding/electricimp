
led <- hardware.pin9
temp <- hardware.pin8

led.configure(DIGITAL_OUT)
temp.configure(ANALOG_IN)
 
state <- 0.0
tempF <- 0.0

blinkFrequency <- 2.0
tempFrequency <- blinkFrequency

function blink() {
    state = (1 - state)
    led.write(state)
    imp.wakeup(blinkFrequency, blink)
}

function getTemp() {
    local sensorReading = temp.read()
    
    if (tempF == 0.0 || math.abs(tempF - sensorReading) > 5.0) {
        tempF = (sensorReading * 0.4882) / 100
    } else {
        tempF = (tempF + (sensorReading * 0.4882 ) / 100) / 2
    }

    if (tempF < 0.0 || tempF > 200.00) {
        tempF = 0.0
    }

    local gwaasDataTable = {
        "temperatureF": tempF,
    }
    
    local gwaasFeedData = {
        "macAddress": imp.getmacaddress(),
        "json": gwaasDataTable
    }

    local xivelyDataTable = [
        {"id":"temperatureF", "current_value": tempF },
        {"id":"sensorReading", "current_value": sensorReading }
    ]
    
    local xivelyFeedData = {
        "feedKey": imp.getmacaddress(),
        "json": xivelyDataTable
    }
    
    agent.send("sendtogwaas", gwaasFeedData)
    agent.send("sendtoapp", gwaasFeedData)
    agent.send("sendtoxively", xivelyFeedData)
    
    imp.wakeup(tempFrequency, getTemp)
}

blink()
getTemp()
